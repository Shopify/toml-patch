name: Rust CI

on:
  pull_request:
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  check_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # pin@v4.0.0
      with:
        version: "8.15.0"
        run_install: false

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "20"
        cache: 'pnpm'
        cache-dependency-path: 'example/pnpm-lock.yaml'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      shell: bash
      working-directory: example

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: clippy, rustfmt
        targets: wasm32-unknown-unknown

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Formatting
      run: cargo fmt --all -- --check
      continue-on-error: true

    - name: Linting
      run: cargo clippy --all-targets --all-features -- -D warnings
      continue-on-error: true

    - name: Run cargo check
      run: cargo check --target="wasm32-unknown-unknown" --all-features
      continue-on-error: true

    - uses: jetli/wasm-pack-action@v0.4.0
      with:
        version: 'latest'

    - name: Run wasm-pack tests
      run: wasm-pack test --node -- --color always # Pass color flag to wasm-pack tests
      continue-on-error: true

    - name: Run example tests
      run: pnpm test
      working-directory: example
